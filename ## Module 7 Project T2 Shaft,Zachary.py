## Module 7 Project T2 Shaft,Zachary 
# Create a program that calls the function myFunction(x) from 0 to 9999 and applies the Hill Climbing algorithm to find the value of x that delivers the largest value for the function

# Implement a version where the initial search value x is chosen randomly between the values 1 to 9998

# Please note that your program must include and use a function called "hillClimb(arr, start_index)" that does the following:

# accepts two parameters, an array, arr, and a starting index, start_index). They should be named "arr" and "start_index". (You generate the array using "myFunction" above and you should generate the start_index with a pseudorandom number generator, but you should test this on small examples.)
# returns the index of the local peak and the value in this fashion: return local_maximum_index, arr[local_maximum_index] (Please note that "local_maximum_index" can be called whatever you want but the two returned values need to be arranged in that order above. Do not put them in a list ("[ ]") or other data structure.
# If the starting index is a local peak, the starting index and its value should be returned.
# If the starting index ends up in a pit, with equal increases to the left and to the right, search to the right. This is an arbitrary decision I am forcing upon you based on testing requirements on my end.
# If the starting index ends up in a pit with unequal increases to the left and right, search the higher path.
# Make sure your searching can go all the way to the ends of the array if need be.
# Make sure your program can traverse shoulders. If at the end of the shoulder, the values start to decrease, you should end at the last part of the shoulder. For example hillClimb([6,5,5,5,4,3,2],5) should return the index 0 and the value 6 but hillClimb([2,5,5,5,4,3,2],5) should return the index 1 and the value 5.

# hillClimb algorithm accepts an array and a starting index according to the prompt. (15)
# hillClimb algorithm returns an index and a value of the local maximum according to the exact specifications of the prompt. (15)

# The array generated by myFunction and a random starting index of the correct amount passed into the hillClimb function.

# hillClimb algorithm passes all test cases. Be sure to look carefully at the directions above.


## Module 7 Project Shaft, Zachary 

from math import log2
import random

##Code from class 
def myFunction(x):
    if (x == 0):
        return 0
    elif ((log2(x) * 7) % 17) < (x % 13):
        return (x + log2(x)) ** 3
    elif ((log2(x) * 5) % 23) < (x % 19):
        return (log2(x) * 2) ** 3
    else:
        return (log2(x) ** 2)

def hillClimb(arr, start_index):
    current_index = start_index
    current_dir = ''

    while True:
        left_value = arr[current_index - 1] if current_index - 1 >= 0 else float('-inf')
        right_value = arr[current_index + 1] if current_index + 1 < len(arr) else float('-inf')
        current_value = arr[current_index]
        if current_dir == '':
            if left_value > right_value:
                current_dir = 'left'
            else:
                current_dir = 'right'
        
        # At peak
        if current_value > left_value and current_value > right_value:
            break
        # At end of array
        if current_index == 0 or current_index == len(arr) - 1:
            break
    
        if current_dir == 'right':
            if current_value > right_value:
                break
            current_index += 1
        else:
            if current_value > left_value:
                break
            current_index -= 1

    return current_index, current_value


# Generate the array using myFunction
array_size = 10000
function_array = [myFunction(x) for x in range(array_size)]

# Generate a random starting index
start_index = random.randint(1, array_size - 2)

# Apply hillClimb algorithm
peak_index, peak_value = hillClimb(function_array, start_index)

# Print the result
print(f"Local maximum index: {peak_index}, Value: {peak_value}")


# Apply hillClimb algorithm
# peak_index, peak_value = hillClimb(function_array, start_index)
peak_index, peak_value = hillClimb([6,5,5,5,4,3,2],5)

# Print the result
print(f"Local maximum index: {peak_index}, Value: {peak_value}")

peak_index, peak_value = hillClimb([2,5,5,5,4,3,2],5)

# Print the result
print(f"Local maximum index: {peak_index}, Value: {peak_value}")


# hillClimb([6,5,5,5,4,3,2],5)
# hillClimb([2,5,5,5,4,3,2],5)

